{"version":3,"sources":["axios.js","requests.js","Row.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrendings","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentries","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","orignal_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9933bb81.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n})\n\nexport default instance;","const API_KEY = \"7f26b1e21a1d43a8c62da3ef1b7b6cf5\"\n\nconst requests = {\n    fetchTrendings: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `discover/movie?api_key=${API_KEY}&{API_KEY}&with_genres=28`,\n    fetchComedyMovies: `discover/movie?api_key=${API_KEY}&{API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `discover/movie?api_key=${API_KEY}&{API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `discover/movie?api_key=${API_KEY}&{API_KEY}&with_genres=10749`,\n    fetchDocumentries: `discover/movie?api_key=${API_KEY}&{API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios.js\";\nimport requests from \"./requests.js\";\nimport \"./Row.css\";\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer'\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\")\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: '390',\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    }\n  }\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n\n        }).catch((error) => console.log(error))\n    }\n  }\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchTrendings);\n      setMovie(\n        request.data.results[\n        Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"....\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.orignal_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n      <div className=\"banner__fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from 'react'\nimport \"./Navbar.css\"\n\n\nfunction Navbar() {\n    const [show, handleShow] = useState(false)\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            }\n            else handleShow(false);\n        })\n        return () => {\n            window.removeEventListener(\"scroll\")\n        }\n    }, [])\n\n\n    return (\n        <div className={`nav ${show && \"nav__black\"}`}>\n            <img\n                className=\"nav__logo\"\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\n                alt=\"Netflix Logo\"\n            />\n\n            <img className=\"nav__avatar\"\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                alt=\"Netflix avatar\"\n            />\n        </div>\n    )\n}\n\nexport default Navbar\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row.js\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner.js\";\nimport Navbar from \"./Navbar.js\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrendings} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentries\" fetchUrl={requests.fetchDocumentries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}